{"1747671338249":{"actionType":"saveAll","createdAt":"1747671338249","actionID":"1747671338249","userID":"#TEMP","path":"system.capsules.0f198dd9-d848-4540-bb27-829ddaafc053.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\n\tconst path = 'customs.geminiRes';\n\tconst apiKey = 'AIzaSyC8MD4ZTRedYmVIvwfAAVCX-OthA6QQ37c';\n\tasync function generateContent() {\n\t\tconst url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' + apiKey;\n\t\tconst data = { contents: [{ parts: [{ text: 'Você deve gerar o conteúdo pra preencher as informações do youtube (Enviar Vídeo). Gere uma sugestão para Título, Descrição, Hashs e Imagem de Capa, conforme detalhes a seguir:' }, { text: '' }] }], generationConfig: { responseMimeType: 'application/json', responseSchema: { type: 'OBJECT', properties: { title: { type: 'STRING' }, description: { type: 'STRING' }, hashs: { type: 'ARRAY', items: { type: 'STRING' } } }, propertyOrdering: ['title', 'description', 'hashs'] } } };\n\t\ttry {\n\t\t\tconst response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n\t\t\tif (!response.ok) { throw new Error('Erro:' + response.status + response.statusText); }\n\t\t\tconst result = await response.json();\n\t\t\tconst rawText = result.candidates[0].content.parts[0].text;\n\t\t\tconsole.log('Resultado da API:', result);\n\t\t\tlet parsedObject;\n\t\t\ttry {\n\t\t\t\tparsedObject = JSON.parse(rawText);\n\t\t\t\tconsole.log('Objeto convertido:', parsedObject);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('Erro ao converter o texto em objeto:', e);\n\t\t\t}\n\t\t\treturn parsedObject;\n\t\t} catch (error) {\n\t\t\tconsole.error('Erro na requisição:', error);\n\t\t}\n\t}\n\tconst generateImage = async () => {\n\t\tconst urlImg = 'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=' + apiKey;\n\t\tconst myHeaders = new Headers();\n\t\tmyHeaders.append('Content-Type', 'application/json');\n\t\tconst raw = JSON.stringify({ instances: [{ prompt: 'A futuristic teddy bear flying in space.' }], parameters: { sampleCount: 2, personGeneration: 'allow_adult', includeSafetyAttributes: true, aspectRatio: '1:1' } });\n\t\tconst requestOptions = { method: 'POST', headers: myHeaders, body: raw, redirect: 'follow' };\n\t\treturn await fetch(urlImg, requestOptions)\n\t\t\t.then(response => response.text())\n\t\t\t.then(result => { console.log({ result }); return result; })\n\t\t\t.catch(error => console.error(error));\n\t};\n\tconst content = await generateContent();\n\tconst imageContent = await generateImage();\n\ttools.functions.setVar({ args: '', pass: { keyPath: [path], value: [{ content, imageContent }] } });\n}","newValue":"async () => {\n\tconst path = 'customs.geminiRes';\n\tconst apiKey = 'AIzaSyC8MD4ZTRedYmVIvwfAAVCX-OthA6QQ37c';\n\tasync function generateContent() {\n\t\tconst url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' + apiKey;\n\t\tconst data = { contents: [{ parts: [{ text: 'Você deve gerar o conteúdo pra preencher as informações do youtube (Enviar Vídeo). Gere uma sugestão para Título, Descrição, Hashs e Imagem de Capa, conforme detalhes a seguir:' }, { text: 'programação' }] }], generationConfig: { responseMimeType: 'application/json', responseSchema: { type: 'OBJECT', properties: { title: { type: 'STRING' }, description: { type: 'STRING' }, hashs: { type: 'ARRAY', items: { type: 'STRING' } } }, propertyOrdering: ['title', 'description', 'hashs'] } } };\n\t\ttry {\n\t\t\tconst response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n\t\t\tif (!response.ok) { throw new Error('Erro:' + response.status + response.statusText); }\n\t\t\tconst result = await response.json();\n\t\t\tconst rawText = result.candidates[0].content.parts[0].text;\n\t\t\tconsole.log('Resultado da API:', result);\n\t\t\tlet parsedObject;\n\t\t\ttry {\n\t\t\t\tparsedObject = JSON.parse(rawText);\n\t\t\t\tconsole.log('Objeto convertido:', parsedObject);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('Erro ao converter o texto em objeto:', e);\n\t\t\t}\n\t\t\treturn parsedObject;\n\t\t} catch (error) {\n\t\t\tconsole.error('Erro na requisição:', error);\n\t\t}\n\t}\n\tconst generateImage = async () => {\n\t\tconst urlImg = 'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=' + apiKey;\n\t\tconst myHeaders = new Headers();\n\t\tmyHeaders.append('Content-Type', 'application/json');\n\t\tconst raw = JSON.stringify({ instances: [{ prompt: 'A futuristic teddy bear flying in space.' }], parameters: { sampleCount: 2, personGeneration: 'allow_adult', includeSafetyAttributes: true, aspectRatio: '1:1' } });\n\t\tconst requestOptions = { method: 'POST', headers: myHeaders, body: raw, redirect: 'follow' };\n\t\treturn await fetch(urlImg, requestOptions)\n\t\t\t.then(response => response.text())\n\t\t\t.then(result => { console.log({ result }); return result; })\n\t\t\t.catch(error => console.error(error));\n\t};\n\tconst content = await generateContent();\n\tconst imageContent = await generateImage();\n\ttools.functions.setVar({ args: '', pass: { keyPath: [path], value: [{ content, imageContent }] } });\n}"}}