{"1747664098504":{"actionType":"saveAll","createdAt":"1747664098504","actionID":"1747664098504","userID":"#TEMP","path":"system.capsules.0f198dd9-d848-4540-bb27-829ddaafc053.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"async () => {\nconst test1 = tools.getCtData('');\nconsole.log({ test1 });\n  const apiKey = 'AIzaSyC8MD4ZTRedYmVIvwfAAVCX-OthA6QQ37c';\n\n  async function generateContent() {\n    const url =\n      'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' +\n      apiKey;\n\n    const data = {\n      contents: [\n        {\n          parts: [\n            {\n              text: 'Você deve gerar o conteúdo pra preencher as informações do youtube (Enviar Vídeo). Gere uma sugestão para Título, Descrição, Hashs e Imagem de Capa, conforme detalhes a seguir:',\n            },\n            { text: 'um vídeo sobre a vida animal' },\n          ],\n        },\n      ],\n      generationConfig: {\n        responseMimeType: 'application/json',\n        responseSchema: {\n          type: 'OBJECT',\n          properties: {\n            title: { type: 'STRING' },\n            description: { type: 'STRING' },\n            hashs: {\n              type: 'ARRAY',\n              items: { type: 'STRING' },\n            },\n          },\n          propertyOrdering: ['title', 'description', 'hashs'],\n        },\n      },\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro:' + response.status + response.statusText);\n      }\n\n      const result = await response.json();\n      const rawText = result.candidates[0].content.parts[0].text;\n      console.log('Resultado da API:', result);\n\n      // Verificando se o conteúdo é uma string JSON\n      let parsedObject;\n      try {\n        parsedObject = JSON.parse(rawText);\n        console.log('Objeto convertido:', parsedObject);\n      } catch (e) {\n        console.error('Erro ao converter o texto em objeto:', e);\n      }\n\n      // setResult(parsedObject);\n      return parsedObject;\n    } catch (error) {\n      console.error('Erro na requisição:', error);\n    }\n  }\n\n  const generateImage = async () => {\n    const urlImg =\n      'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=' +\n      apiKey;\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n\n    const raw = JSON.stringify({\n      instances: [\n        {\n          prompt: 'A futuristic teddy bear flying in space.',\n        },\n      ],\n      parameters: {\n        sampleCount: 2,\n        personGeneration: 'allow_adult',\n        includeSafetyAttributes: true,\n        aspectRatio: '1:1',\n      },\n    });\n\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    };\n\n    return await fetch(urlImg, requestOptions)\n      .then(response => response.text())\n      .then(result => {\n        console.log({ result });\n        // setImage(result);\n        return result;\n      })\n      .catch(error => console.error(error));\n  };\n\n  const content = await generateContent();\n  const imageContent = await generateImage();\n\n  console.log({ content, imageContent });\n}","newValue":"async () => {\nconst test1 = tools.getCtData('all');\nconsole.log({ test1 });\n  const apiKey = 'AIzaSyC8MD4ZTRedYmVIvwfAAVCX-OthA6QQ37c';\n\n  async function generateContent() {\n    const url =\n      'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' +\n      apiKey;\n\n    const data = {\n      contents: [\n        {\n          parts: [\n            {\n              text: 'Você deve gerar o conteúdo pra preencher as informações do youtube (Enviar Vídeo). Gere uma sugestão para Título, Descrição, Hashs e Imagem de Capa, conforme detalhes a seguir:',\n            },\n            { text: 'um vídeo sobre a vida animal' },\n          ],\n        },\n      ],\n      generationConfig: {\n        responseMimeType: 'application/json',\n        responseSchema: {\n          type: 'OBJECT',\n          properties: {\n            title: { type: 'STRING' },\n            description: { type: 'STRING' },\n            hashs: {\n              type: 'ARRAY',\n              items: { type: 'STRING' },\n            },\n          },\n          propertyOrdering: ['title', 'description', 'hashs'],\n        },\n      },\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro:' + response.status + response.statusText);\n      }\n\n      const result = await response.json();\n      const rawText = result.candidates[0].content.parts[0].text;\n      console.log('Resultado da API:', result);\n\n      // Verificando se o conteúdo é uma string JSON\n      let parsedObject;\n      try {\n        parsedObject = JSON.parse(rawText);\n        console.log('Objeto convertido:', parsedObject);\n      } catch (e) {\n        console.error('Erro ao converter o texto em objeto:', e);\n      }\n\n      // setResult(parsedObject);\n      return parsedObject;\n    } catch (error) {\n      console.error('Erro na requisição:', error);\n    }\n  }\n\n  const generateImage = async () => {\n    const urlImg =\n      'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=' +\n      apiKey;\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n\n    const raw = JSON.stringify({\n      instances: [\n        {\n          prompt: 'A futuristic teddy bear flying in space.',\n        },\n      ],\n      parameters: {\n        sampleCount: 2,\n        personGeneration: 'allow_adult',\n        includeSafetyAttributes: true,\n        aspectRatio: '1:1',\n      },\n    });\n\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    };\n\n    return await fetch(urlImg, requestOptions)\n      .then(response => response.text())\n      .then(result => {\n        console.log({ result });\n        // setImage(result);\n        return result;\n      })\n      .catch(error => console.error(error));\n  };\n\n  const content = await generateContent();\n  const imageContent = await generateImage();\n\n  console.log({ content, imageContent });\n}"}}